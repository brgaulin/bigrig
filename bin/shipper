#!/usr/bin/env ruby
require 'gli'
require 'shipper'

include GLI::App

program_desc 'Describe your application here'

version Shipper::VERSION

subcommand_option_handling :normal
arguments :strict

# desc 'Describe some switch here'
# switch [:s, :switch]

# desc 'Describe some flag here'
# default_value 'the default'
# arg_name 'The name of the argument'
# flag [:f, :flagname]
#
desc 'Start the applicaiton in dev mode'
arg_name '<shipper_file>'

command :dev do |c|
  c.desc 'profiles to activate'
  c.flag [:p, :profiles]

  c.action do |_global_options, options, args|
    profiles = options[:profiles] && options[:profiles].split(',') || []
    DevAction.new(args[0], profiles).perform
  end
end

desc 'Prints logs from the application'
arg_name '<shipper_file>'
command :logs do |c|
  c.action do |_global_options, _options, args|
    LogAction.new(args[0]).perform
  end
end

desc 'Spin up a shipper application'
arg_name '<shipper file>'
command :run do |c|
  c.desc 'profiles to activate'
  c.flag [:p, :profiles]

  c.action do |_global_options, options, args|
    args[0] || fail('shipper file is required')
    profiles = options[:profiles] && options[:profiles].split(',') || []

    RunAction.new(args[0], profiles).perform
  end
end

desc 'Stop and destroy a shipper application'
arg_name '<shipper_file>'
command :destroy do |c|
  c.action do |_global_options, _options, args|
    args[0] || fail('shipper file is required')
    DestroyAction.new(args[0]).perform
  end
end

pre do |_global, _command, _options, _args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |_global, _command, _options, _args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |e|
  # Error logic here
  # return false to skip default error handling
  puts e.backtrace
  true
end

exit run(ARGV)
